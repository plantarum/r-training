\documentclass{article}
\usepackage{tgschola}             % favourite font
\usepackage[T1]{fontenc}          % required with font packages
\usepackage[section]{placeins}    % keep figures in the section where
                                  % they're referenced
\usepackage[scaled=0.9]{DejaVuSansMono}           % DejaVuSans font for code
%%\usepackage{natbib}               % reference style
%%\bibpunct{(} {)} {;} {a} {} {,}   % citation formatting
\usepackage[margin=1in]{geometry} % document size
\usepackage[colorlinks=true,urlcolor=blue]{hyperref}
\usepackage[dvipsnames]{xcolor}

%\def\Rcolor{\color[rgb]{0,0.5,0.5}}
\def\Rcolor{\color{black}}
\def\Routcolor{\color{black}}
\def\Rcommentcolor{\color{BrickRed}}
\def\Routbackground{\color{white}}
\def\Rbackground{\color[gray]{0.95}}
\def\Sweavesize{\normalsize}

\lstdefinestyle{Rstyle}{fancyvrb=false,escapechar=`,language=R,%
                        basicstyle={\Rcolor\Sweavesize\ttfamily},% some want \ttfamily too
                        backgroundcolor=\Rbackground,%
                        showstringspaces=false,%
                        keywordstyle=\color{blue},%
                        commentstyle={\Rcommentcolor\ttfamily},%
                        alsoother={$},%
                        alsoletter={.<-},%
                        otherkeywords={!,!=,~,$,*,\&,\%/\%,\%*\%,\%\%,<-,<<-,/},%
                        escapeinside={(*}{*)},
                        frame=single,framerule=0.2pt,framesep=3pt}%

\title{Publication Quality Graphics with R}
\author{Tyler Smith}

\begin{document}

\maketitle{}

<<formatting,include=FALSE, purl = FALSE>>=
options(replace.assign=TRUE, width=68)
opts_chunk$set(tidy = FALSE)
render_listings()
@ 

<<final-product, echo = FALSE, fig.height = 3.5, fig.width = 7.25, fig.cap="A. Iris Sepal Size by Species. B. Iris Petal Width", fig.pos="h", dpi=300, purl=FALSE>>=
#dev.new(width=7.25, height=3.5)
par(mfrow = c(1, 2))
par(mar = c(3, 3, 0.5, 0.5))
mysymbols <- c(19, 5, 3)
plot(Sepal.Length ~ Sepal.Width, pch = mysymbols[as.numeric(Species)],
data = iris, ylim = c(3.5, 8), ann = FALSE, axes = FALSE)
box()
axis(side = 1, tcl = -0.2, mgp = c(3, 0.3, 0), cex.axis = 0.8)
axis(side = 2, tcl = -0.2, mgp = c(3, 0.3, 0), cex.axis = 0.8)
mtext("Sepal Width", side = 1, line = 1.5)
mtext("Sepal Length", side = 2, line = 1.5)
legend(legend = levels(iris$Species), x = "bottom", pch = mysymbols, horiz = TRUE,
bty = "n", cex = 0.9, text.width = c(0.6, 0.7, 0.6))
## For the first panel:
text("A", x = grconvertX(0.1, from = "npc", to = "user"), 
     y = grconvertY(0.9, from = "npc", to = "user"), cex = 2)

par(mar = c(3, 3, 0.5, 0.5))
boxplot(Petal.Width ~ Species, data = iris, axes = FALSE)
box()
axis(side = 1, at = 1:3, tcl = -0.2, mgp = c(3, 0.5, 0), 
     cex.axis = 1, labels = levels(iris$Species))
axis(side = 2, tcl = -0.2, mgp = c(3, 0.3, 0), cex.axis = 0.8)
mtext("Petal Width", side = 2, line = 1.5)

## For the first panel:
text("B", x = grconvertX(0.1, from = "npc", to = "user"), 
     y = grconvertY(0.9, from = "npc", to = "user"), cex = 2)
@ 


\section{Learning Objectives}

At the end of this lesson, you should be able to:

\begin{itemize}
\item Customize plots produced with the R base graphics system
\item Design multi-panel plots
\item Design plots to suit the publication requirements of a journal
\item Save your plots as high-resolution raster or vector image files as required by your publisher
\end{itemize}

\section{Pre-requisites}

You will need:

\begin{itemize}
\item A recent version of R installed on your computer
\item Familiarity editing R scripts and passing commands from a script to the R interpreter
\item RStudio \textbf{will not} work for this lesson, due to limitations in how it processes
  plotting commands; the default RGui installed on Windows or Mac will work fine
\item The pdf notes for lesson (which you are now reading!)
\item The \texttt{plotting-script.R} script, opened in your script editor
\item Optionally, some of your own data to work with during the exercises
\end{itemize}

\section{Introduction}

You have several options for plotting with R. The simplest is the built-in or \texttt{base} graphics
package. Base graphics are less powerful than newer alternatives like \texttt{lattice} or
\texttt{ggplot2}. On the other hand, it's much easier to customize \texttt{base} graphics than the
others. For this reason, I prefer to use the built-in functions when preparing single-panel plots.

\texttt{ggplot2} is definitely worth investigating, especially if you want to produce complex
multi-panel faceted plots. The \href{http://ggplot2.org/}{official website} has all the
documentation. Roger Peng has also posted a very nice introductory
\href{https://www.youtube.com/watch?v=HeqHMM4ziXA\&feature=youtube\_gdata\_player}{video on
  YouTube}.

\section{Preliminaries}

For this example, we'll use the guidelines provided by the
\href{http://www.amjbot.org/site/misc/ifora.xhtml#illustrations}{American Journal of Botany}. AJB
accepts figures 3.5 inches (1 column), 5-6 inches (1.5 columns), or 7.25 inches wide (2 columns).
The height can be up to 9 inches. We'll start with a one-column plot, so the dimensions should be
3.5 inches wide.

The figure we'll plot is from the built-in \texttt{iris} data set. We'll do a simple scatterplot of
\texttt{Sepal.Length} against \texttt{Sepal.Width}.

\section{Size}

Let's start with a square. If we need more height, we can increase the size as necessary. Similarly,
if we decide we need to stretch our figure over two columns, we can change later.  

\textbf{Note that we can't use RStudio for this exercise.} Unfortunately, it's not possible to
create new plot windows in RStudio, so you'll have to use another editor for this.

To set up the canvas for our plot, start a new device:

<<canvas, eval = FALSE>>=
dev.new(height = 3.5, width = 3.5)
@ 

\section{Content}

Now that our canvas is ready, we can start placing our graphics. Let's start with the default plot.

<<iris-fig-1-source, eval=FALSE>>=
plot(Sepal.Length ~ Sepal.Width, pch = as.numeric(Species), data = iris)
@ 

<<iris-fig-1, fig.height= 3.5, fig.width=3.5, fig.align ="center", echo = FALSE, purl=FALSE>>=
par(bg="#FCFCFC")
<<iris-fig-1-source>>
@ 

\subsection{Margins}

Now we can see what we're working with. The layout isn't ideal. In particular, the plot is very
small relative to the size of the figure. We can fix this with the \texttt{mar} parameter.
\texttt{mar} takes a vector of four integers, which set the width of the margin on the bottom, left,
top and right sides respectively (remember clockwise from the bottom!). The default is \texttt{c(5,
  4, 4, 2) + 0.1}. The top margin in particular is usually too wide. We will very rarely add a title
to a published figure, so we don't need to set aside space for it.

Set the value of \texttt{mar} with the \texttt{par} function:

<<iris-fig-2-source, eval = FALSE>>=
par(mar = c(3, 3, 0.5, 0.5))
plot(Sepal.Length ~ Sepal.Width, pch = as.numeric(Species), data = iris)
@ 

<<iris-fig-2, fig.height= 3.5, fig.width=3.5, fig.align ="center", echo = FALSE, purl=FALSE>>=
par(bg="#FCFCFC")
<<iris-fig-2-source>>
@ 

That's better. But we've lost our axis labels. They aren't actually lost, but they are plotted
outside of the margins we've set, so they are no longer visible. I find the defaults that R uses for
the axes to be larger than we need. Better to turn off the axes entirely and replot them ourselves.

Note that once the margins are set with \texttt{par()}, they will keep their value until we open a
new plot window, or reset them.

\subsection{Axes}

<<iris-fig-3-source, eval = FALSE, purl = FALSE>>=
plot(Sepal.Length ~ Sepal.Width, pch = as.numeric(Species), data = iris, 
     ann = FALSE,                       # turn off axis labels
     axes = FALSE)                      # turn off axis ticks
@ 

<<iris-fig-3, fig.height= 3.5, fig.width=3.5, fig.align ="center", echo = FALSE, purl = FALSE>>=
par(bg="#FCFCFC", mar = c(3, 3, 0.5, 0.5))
<<iris-fig-3-source>>
@ 

Notice that \texttt{axes = FALSE} has turned of the box around our plot. We can put it back easily:

<<iris-box, eval=FALSE>>=
box()
@ 

Now we can explicitly add each axis according with the size and placement specified:

<<iris-axes, eval=FALSE>>=
axis(side = 1, tcl = -0.2, mgp = c(3, 0.3, 0), cex.axis = 0.8) 
axis(side = 2, tcl = -0.2, mgp = c(3, 0.3, 0), cex.axis = 0.8) 
@ 

What just happened?

\begin{description}
\item[side: ] which side of the plot, clockwise from bottom, same as for \texttt{mar} above
\item[tcl: ] length of the ticks. Negative values indicate extending outwards from plot, positive
  values extend inward. The default is -0.5, which I find a bit too long.
\item[mgp: ] `margin line', a vector of three numbers, which indicate the position of the axis
  title, axis labels, and axis line, respectively. The values are the number of `lines' away from
  the plot border to place each item, with `0' indicating the margin of the plot area. Note that
  title doesn't matter here, since we aren't using an axis title (yet).
\item[cex.axis: ] axis character expansion. Scale the size of the tick labels. < 1 reduces the size,
  > 1 increases the size.
\end{description}

Now we can add our axis titles back in:

<<iris-axis-titles, eval=FALSE>>=
mtext("Sepal Width", side = 1, line = 1.5)
mtext("Sepal Length", side = 2, line = 1.5)
@ 

Here, we can use \texttt{line} to adjust the distance between the label text and the axis. 

\subsection{The finished plot}

Putting this altogether gives us the following plot. 

<<iris-finished-plot, fig.width=3.5, fig.height=3.5, fig.align= "center", echo = -1>>=
par(bg="#FCFCFC", mar = c(3, 3, 0.5, 0.5))
<<iris-fig-3-source>>
<<iris-box>>
<<iris-axes>>
<<iris-axis-titles>>
@ 

\subsection*{Exercise 1: adding a legend}

We now have a complete figure. We could provide an explanation of the symbols in the caption, but it
might be nicer to have a legend plotted on the figure. This is easily done with the
\texttt{legend()} function.

<<legend, eval=FALSE>>=
legend(legend = levels(iris$Species), x="topleft", pch = 1:3)
@ 

<<legend-code, echo=FALSE, fig.height=3.5, fig.width=3.5, fig.align = "center">>=
<<iris-finished-plot>>
<<legend>>
@ 

Since we set the \texttt{pch} argument in our plots using the factor \texttt{iris\$Species}, we can %$
use \texttt{levels()} function to extract the labels for the legend. \texttt{pch} indicates the
actual symbols to use, and \texttt{x} is the location of the legend.

This is clearly not ``publication quality''. Our plot needs a bit more space for the legend. See if
you can make an attractive plot. The following options might be helpful:


\begin{description}
\item[dev.new(): ] \texttt{width, height}
\item[plot(): ] \texttt{xlim, ylim, cex}
\item[legend(): ] \texttt{x, y, bty, horiz, cex, pt.cex, text.width}
\end{description}

If you need a hint, take a look at the next section.


%% Here's one solution:

%% <<nice-legend, fig.width=3.5, fig.height=3.5, fig.align="center", echo = -1>>=
%% par(bg="#FCFCFC", mar = c(3, 3, 0.5, 0.5))
%% plot(Sepal.Length ~ Sepal.Width, pch = as.numeric(Species), data = iris,
%%      ylim = c(4.0, 8.5),
%%      ann = FALSE, axes = FALSE)
%% box()
%% axis(side = 1, tcl = -0.2, mgp = c(3, 0.3, 0), cex.axis = 0.8)
%% axis(side = 2, tcl = -0.2, mgp = c(3, 0.3, 0), cex.axis = 0.8)
%% mtext("Sepal Width", side = 1, line = 1.5)
%% mtext("Sepal Length", side = 2, line = 1.5)
%% legend(legend = levels(iris$Species), x = "top", pch = 1:3, horiz = TRUE, bty = 'n', 
%%        cex = 0.9, text.width = c(0.6, 0.7, 0.6))

%% @ 

\subsection{Selecting Plot Symbols}

If you want to select different symbols, it's easy to do with using R's subsetting syntax. By
default, for three levels of our \texttt{Species} factor, we get symbols 1, 2, and 3. If instead we
wanted to use symbols 19, 5, and 3, we could do this:

<<symbols-source1, eval=FALSE, echo=FALSE>>=
mysymbols <- c(19, 5, 3)
plot(Sepal.Length ~ Sepal.Width, pch = mysymbols[as.numeric(Species)], data = iris,
     ylim = c(4.0, 8.5), ann = FALSE, axes = FALSE)
@ 

<<symbols-source2, eval=FALSE, echo=FALSE>>=
legend(legend = levels(iris$Species), x = "top", pch = mysymbols, horiz = TRUE, 
       bty = 'n', cex = 0.9, text.width = c(0.6, 0.7, 0.6))
@ 

<<symbols-fig-source, eval=FALSE, echo=FALSE>>=
<<symbols-source1>>
<<iris-box>>
<<iris-axes>>
<<iris-axis-titles>>
<<symbols-source2>>
@ 

<<symbols, fig.width=3.5, fig.height=3.5, fig.align="center", echo = -1>>=
par(bg="#FCFCFC", mar = c(3, 3, 0.5, 0.5))
<<symbols-fig-source>>
@ 

\subsection{Panels}

\texttt{ggplot2} provides a very sophisticated system for producing multi-panel plots. But it's easy
enough to create a simple panel using the base graphics. For this example, let's do a two-plot
horizontal panel, with our scatter plot in the first position, and a boxplot of petal widths in the
second position. A two-column plot in AJB is 7.25 inches wide:

<<two-columns, eval = FALSE>>=
dev.new(width = 7.25, height = 3.5)
@ 

Next we need, to inform R that we're splitting the figure into two panels:

<<two-plots, eval=FALSE>>=
par(mfrow = c(1, 2))
@ 

\texttt{mfrow} sets the graphics device for rows and columns, in this case one row, two columns. We
can now put our first plot in the first spot:

<<panel1, fig.width=7.25, fig.height=3.5, fig.align="center", echo = -1>>=
par(bg="#FCFCFC")
par(mfrow = c(1, 2))
par(mar = c(3, 3, 0.5, 0.5))
<<symbols-fig-source>>
@ 

After dividing a plot device into panels with \texttt{mfrow}, the first high-level plot (i.e.,
\texttt{plot, boxplot} etc.) command will be placed in the first panel. All subsequent low-level
plotting commands (i.e., \texttt{legend, axis, mtext} etc.) will be added to this same panel. When
the next high-level command is called, it will be placed in the next panel, and focus shifts with
it. So we can now add our boxplot to the second panel:

<<boxplot1, eval=FALSE>>=
boxplot(Petal.Width ~ Species, data = iris)
@ 

<<panel2, fig.width=7.25, fig.height=3.5, fig.align="center", echo = FALSE>>=
par(bg="#FCFCFC")
par(mfrow = c(1, 2))
par(mar = c(3, 3, 0.5, 0.5))
<<symbols-fig-source>>
<<boxplot1>>
@ 

Note that the margins we set for the first panel are still in effect. Consequently, we've lost the
axis labels on our second plot. It's going to need some attention to make it look right. We'll leave
that for the next exercise. 

In the meantime, we have one more requirement to meet. On multi-figure panels, AJB requires an
uppercase letter (A, B, etc) to label each plot. This label should go in the upper-left corner of
each panel. This is easy to do with the \texttt{text} command. At the moment, we don't have space in
the upper-left corner, so we'll put the labels in the lower-right temporarily. For example:

<<panel-a-label, eval = FALSE>>=
## For the first panel:
text("A", x = 4.2, y = 4.5, cex = 2)
@ 

<<panel-b-label, eval = FALSE>>=
## For the second panel:
text("B", x = 3.2, y = 0.24, cex = 2)
@ 

<<panel2B, fig.width=7.25, fig.height=3.5, fig.align="center", echo = FALSE>>=
par(bg="#FCFCFC")
par(mfrow = c(1, 2))
par(mar = c(3, 3, 0.5, 0.5))
<<symbols-fig-source>>
<<panel-a-label>>
<<boxplot1>>
<<panel-b-label>>
@ 

Unfortunately, each figure is plotted on different scales, so placing the letters in the same
position is not straightforward. Luckily, R provides a function for getting `universal' coordinates
for every plot. 

<<panel-a-label-2, eval = FALSE>>=
## For the first panel:
text("A", x = grconvertX(0.9, from="npc", to="user"), 
     y = grconvertY(0.1, from = "npc", to="user"), cex = 2)
@ 

<<panel-b-label-2, eval = FALSE>>=
## For the first panel:
text("B", x = grconvertX(0.9, from="npc", to="user"), 
     y = grconvertY(0.1, from = "npc", to="user"), cex = 2)

@ 

The functions \texttt{grconvertX} and \texttt{grconvertY} convert between different coordinate
systems. \texttt{npc} is ``normalized plot coordinates''. In this system, (0, 0) is the lower left
corner of the plot, and (1, 1) is the upper right corner. \texttt{user} coordinates are the actual
scales used in each figure. \texttt{user}, on the other hand, is the coordinate system in effect for
the actual plotted data. Which, for our Panel A, means the lower right corner is ca. (2.0, 4.0) and
the upper left corner is ca. (4.5, 8.5). So \texttt{grconvertX(0.9, from = "npc", to = "user")}
returns the X coordinate to plot our text 90\% of the way to the left side of the plot, regardless
of the scale used in that plot. With this addition, we have the following code, and the generated
panels:


<<panel-final, eval=FALSE>>=
par(mfrow = c(1, 2))
par(mar = c(3, 3, 0.5, 0.5))
<<symbols-fig-source>>
<<panel-a-label-2>>
<<boxplot1>>
<<panel-b-label-2>>
@ 

<<panel2Bc, fig.width=7.25, fig.height=3.5, fig.align="center", echo = FALSE>>=
par(bg="#FCFCFC")
<<panel-final>>
@ 

\subsection*{Exercise 2: Completing the Panel}

There are still a few problems with our panel:

\begin{itemize}
\item The title of the Y axis on the second panel is not visible
\item The panel labels (A and B) are in the wrong positions --- they should be in the top left corners
\item Fixing the panel labels will require moving the legend for the first figure
\end{itemize}

If you change \texttt{ylim}, you can put the legend on the bottom, and make space for the label at
the top. Go ahead and see what you can do with this. You can use my example, Figure
\ref{fig:final-product}, as a model. Alternatively, try formatting your own data according to the
requirements of a journal in your field.

\section{Image Formats}

R can save graphics to a variety of formats, including anything your target journal might require.
In general, you can store your images in one of two classes of file format:

\begin{description}
\item[raster: ] images are stored as a matrix of values, with each value indicating the color of a
  single pixel in the grid. Best used for photographs. Examples: jpg, tiff, png.
\item[vector: ] images are stored as a series of mathematical instructions for re-creating the
  display: lines, polygons, text etc. Best used for line drawings. Examples: eps, svg.
\end{description}

\subsection{Raster Images}

Raster images are stored as a grid of numbers called pixels. Each number records the colour of a
single pixel in the image. As a consequence, the image resolution is limited by the number of pixels
recorded in the file. In our example, we need a figure 3.5 inches wide. AJB requires a resolution of
1000 dots per inch (DPI) for line drawings, which means we need a source image \Sexpr{round(1000 *
  3.5, 0)} pixels in the x and y dimension. We don't actually need to do these calculations, though,
R will handle it for us. We just need to pick a format and set the final resolution.

AJB prefers TIFF format for raster files. So to generate one we will use the \texttt{tiff()}
function. Note that this function only sets the file details for our plot; we need to add the
plotting code after we open the file, and close it when we're done with \texttt{dev.off()}.

<<tiff, results="hide", eval = FALSE>>=
tiff(filename = "iris.tiff", width = 3.5, height = 3.5, units="in", res = 1000, 
     compression = "lzw")
<<iris-fig-3>>
<<iris-box>>
<<iris-axes>>
<<iris-axis-titles>>
dev.off()
@ 

\texttt{width}, \texttt{height} and \texttt{units} set the size of the image, \texttt{res} sets the
resolution in points per inch. \texttt{compression} reduces the size of the file. The \texttt{lzw}
options is only available for \texttt{tiff} files. It's lossless, which means the compressed image
is just as good as the original, so there's no reason not to use it. In this case, it reduces the
file size from 36Mb to 366K --- a 99\% reduction!

To create the same image as a \texttt{jpg} with the same resolution we'd use:

<<jpg, eval=FALSE>>=
jpeg(filename = "iris.jpg", width = 3.5, height = 3.5, units = "in", res = 1000, 
     quality = 85)
## insert plot code here!
dev.off()
@ 

\texttt{jpg} files are always compressed, and they use a lossy compression. That means there is some
degradation of the image quality associated with the compression. The \texttt{quality} argument
determines how aggressively the image is compressed. Higher values produce larger, less-degraded
images. As a rule of thumb, 85 usually produces fine images at a reasonable size. In this case, the
file is 550K, so a little larger than the compressed TIFF file.

\subsection{Vector Images}

Vector images are stored as a list of instructions: 'draw a line from here to here, put a circle at
this coordinate' etc. As a consequence, they don't have an inherent resolution; rather, they can be
printed at any resolution necessary. So we don't worry about the resolution when creating them, just
the size and width. There are other options we need to be concerned with here:

\begin{description}
\item[paper: ] \texttt{"special"} indicates that we are making a single image, not a full-page
\item[onefile: ] \texttt{FALSE} indicates that we are making a new file for each image (probably not
  necessary with a single image)
\item[horizontal: ] \texttt{FALSE} indicates we don't want a landscape-orientation
\end{description}

To create an \texttt{eps} file:

<<eps, eval=FALSE>>=
postscript("iris.eps", height = 3.5, width = 3.5,
           paper = "special", onefile = FALSE, horizontal = FALSE) 
<<iris-finished-plot>>
dev.off()
@ 

This file is only 11K, and can be printed at any resolution. That makes \texttt{eps} a very
convenient format to use. However, you may run into issues with fonts. By default, \texttt{eps}
files produced by R don't include the fonts, just the position of the letters to place on the image.
If you need to embed the fonts, you need to explicitly request this:

<<eps-embedding, eval=FALSE>>=
embedFonts("iris.eps", outfile="iris-embed.eps")
@ 

This command creates a new file, \texttt{iris-embed.eps}, that has the font information embedded in
the file. Fonts can be tricky, and specific details vary between Windows, Mac and Linux. It's
easiest to stick to the default font settings, and only dive into custom fonts and settings if you
are required by the publisher.

\end{document}

%% insert a \FloatBarrier wherever you want to clear floats from the
%% previous section  
\FloatBarrier                           
%%\bibliographystyle{sysbot2}
%%\bibliography{ab,ty2}



%% \Sexpr{## inline r-code goes here}

%% <<chunk-name,options>>=
%% R code goes here
%% @ 
%% 
%% chunk name can include alphanumeric, '-' and '_'. Other symbols or
%% spaces cause problems.
%% 
%% options can be separated by a space, but no line breaks in the chunk header!
%% 
%% some key options and their defaults:
%% eval=TRUE or FALSE - run code? TRUE
%% echo=TRUE or FALSE - display code in output? TRUE
%% include=TRUE or FALSE - display chunk in output? TRUE
%% results=markup, asis, hold, hide - how to process output. markup is
%% default, provides output interleaved with source code, formatted.
%% warning=TRUE or FALSE - display warnings from R? TRUE
%% message, error - as for warning
%% cache=TRUE or FALSE - store code evaluations, only evaluate when the
%% code changes? FALSE

%% Figures:
%% Many options available: see http://yihui.name/knitr/options

%% <<figure-title,fig.align='center', fig.height=4.5,fig.width=5, out.width=3, fig.cap='My caption, inside single quotes. Backslashes must be doubled \\emph{like this}'>>=
%% plot(iris)
%% @ 

%% generated label will be fig:figure-title

%% Emacs ESS commands:
%% M-n s -- to knit: create the tex file: file.Rnw -> file.tex
%% M-n P -- after knitting, produce the pdf output: file.tex -> file.pdf
%% M-n u -- to purl: extract the R code: file.Rnw -> file.R
%% < -- open a new chunk

